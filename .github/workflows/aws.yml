# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "dev" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon Lightsail

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: ${{secrets.AWS_REGION}}                   # set this to your preferred AWS region, e.g. us-west-1
  LIGHTSAIL_SSH_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
  LIGHTSAIL_HOST: ${{ secrets.LIGHTSAIL_HOST }}
  LIGHTSAIL_USERNAME: ${{ secrets.LIGHTSAIL_USERNAME }}
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY}}
  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE}}
  DEBUG: ${{ secrets.DEBUG}}
  RIOT_API_DEVELOPMENT_KEY: ${{ secrets.RIOT_API_DEVELOPMENT_KEY}}
  RIOT_API_KEY: ${{ secrets.RIOT_API_KEY}}
  SUMMONER_URL: ${{ secrets.SUMMONER_URL}}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    #배포 자동화를 시작합니다.
    - name: 배포 자동화
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.LIGHTSAIL_HOST }}
        username: ${{env.LIGHTSAIL_USERNAME}}
        key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
        source: 'blog/*'
        strip_components: 1
        target: '/home/ubuntu/blog/'
    
    - name: Transfer Deploy Script use SCP
      uses: appleboy/scp-action@master
      with:
        username: ubuntu
        host: ${{ secrets.LIGHTSAIL_HOST }}
        key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
        source: "deploy.sh"
        target: "/home/ubuntu/blog"

    - name: 서버 스크립트 실행
      uses: appleboy/ssh-action@master
      with:
        username: ubuntu
        host: ${{ secrets.LIGHTSAIL_HOST }}
        key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
        script_stop: true
        script: |
          # blog 디렉토리로 이동
          cd blog
          # .env 파일 생성
          echo DJANGO_SECRET_KEY=${{ env.DJANGO_SECRET_KEY }} > .env
          echo DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_MODULE }} >> .env
          echo DEBUG=${{ env.DEBUG }} >> .env
          echo RIOT_API_DEVELOPMENT_KEY=${{ env.RIOT_API_DEVELOPMENT_KEY }} >> .env
          echo RIOT_API_KEY=${{ env.RIOT_API_KEY }} >> .env
          echo SUMMONER_URL=${{ env.SUMMONER_URL }} >> .env
          
          # script 실행
          chmod +x /home/ubuntu/blog/deploy.sh && bash /home/ubuntu/blog/deploy.sh

