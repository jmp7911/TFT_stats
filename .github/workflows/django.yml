name: Django CI
env:
  DJANGO_SECRET_KEY: ${{secrets.DJANGO_SECRET_KEY}}
  DEBUG: ${{secrets.DEBUG}}
  DJANGO_SETTINGS_MODULE: ${{secrets.DJANGO_SETTINGS_MODULE}}
  RIOT_API_DEVELOPMENT_KEY: ${{secrets.RIOT_API_DEVELOPMENT_KEY}}
  RIOT_API_KEY: ${{secrets.RIOT_API_KEY}}
  SUMMONER_URL: ${{secrets.SUMMONER_URL}}
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        cd blog
        python manage.py test
    
    - name: 배포
      uses: appleboy/ssh-action@master
      continue-on-error: false
      with:
        host: ${{secrets.AWS_HOST}}
        username: ${{secrets.AWS_USER}}
        password: ${{secrets.AWS_PASSWORD}}
        script: |
          set -e

          # 이동
          cd blog/

          # Git Update
          git pull origin main --ff-only

          # .env 파일 생성
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} > .env
          echo DJANGO_SECRET_KEY: ${{secrets.DJANGO_SECRET_KEY}} >> .env
          echo DEBUG: ${{secrets.DEBUG}} >> .env
          echo DJANGO_SETTINGS_MODULE: ${{secrets.DJANGO_SETTINGS_MODULE}} >> .env
          echo RIOT_API_DEVELOPMENT_KEY: ${{secrets.RIOT_API_DEVELOPMENT_KEY}} >> .env
          echo RIOT_API_KEY: ${{secrets.RIOT_API_KEY}} >> .env
          echo SUMMONER_URL: ${{secrets.SUMMONER_URL}} >> .env
            
          # 모듈 설치
          pip install -r requirements.txt

          # DB 마이그레이션
          python3 manage.py makemigrations
          python3 manage.py migrate

          # 정적 파일 수집
          python3 manage.py collectstatic --noinput

        #   # gunicorn 재실행
        #   sudo systemctl restart gunicorn.service